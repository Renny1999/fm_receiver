!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/renny/Projects/fm_receiver/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/4ab3954a/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
BLOCKINGQUEUE_H	./src/BQ2/BlockingQueue.h	/^#define BLOCKINGQUEUE_H$/;"	d
BLOCKINGQUEUE_H	./src/utils/BlockingQueue.h	/^#define BLOCKINGQUEUE_H$/;"	d
BlockingQueue	./src/BQ2/BlockingQueue.cpp	/^BlockingQueue::BlockingQueue(){$/;"	f	class:BlockingQueue
BlockingQueue	./src/BQ2/BlockingQueue.h	/^class BlockingQueue{$/;"	c
BlockingQueue	./src/utils/BlockingQueue.h	/^BlockingQueue<T>::BlockingQueue(int capacity){$/;"	f	class:BlockingQueue
BlockingQueue	./src/utils/BlockingQueue.h	/^class BlockingQueue{$/;"	c
CAPTURE_THREAD_H	./src/threads/capture_thread.h	/^#define CAPTURE_THREAD_H$/;"	d
CHUNKSIZE	./src/test.cpp	/^int CHUNKSIZE = 512;$/;"	v	typeref:typename:int
CHUNK_SIZE	./src/main.cpp	/^int CHUNK_SIZE = 512;$/;"	v	typeref:typename:int
DEQUE_H	./src/utils/Deque.h	/^#define DEQUE_H$/;"	d
Deque	./src/utils/Deque.h	/^Deque<T>::Deque(int cap){$/;"	f	class:Deque
Deque	./src/utils/Deque.h	/^template<class T> class Deque{$/;"	c
FIXED_SIZED_DEQUE_H	./src/utils/FixedSizedDeque.h	/^#define FIXED_SIZED_DEQUE_H$/;"	d
FM_DEMOD_THREAD_H	./src/threads/FM_demod_thread.h	/^#define FM_DEMOD_THREAD_H$/;"	d
FM_demod_args	./src/threads/FM_demod_thread.h	/^struct FM_demod_args{$/;"	s
FM_demod_thread	./src/threads/FM_demod_thread.cpp	/^void* FM_demod_thread(void* args){$/;"	f	typeref:typename:void *
FixedSizedDeque	./src/utils/FixedSizedDeque.h	/^template <class T> FixedSizedDeque<T>::FixedSizedDeque(int cap){$/;"	f	class:FixedSizedDeque
FixedSizedDeque	./src/utils/FixedSizedDeque.h	/^template <class T> class FixedSizedDeque{$/;"	c
Fs	./src/main.cpp	/^int Fs = 1.44e6;$/;"	v	typeref:typename:int
LOWPASS_THREAD	./src/threads/stage_1_filtering_thread.h	/^#define LOWPASS_THREAD$/;"	d
LR_DIFF_EXTRACTION_THREAD_H	./src/threads/LR_diff_extraction_thread.h	/^#define LR_DIFF_EXTRACTION_THREAD_H$/;"	d
LR_DIFF_RECOVERY_THREAD_H	./src/threads/LR_diff_recovery_thread.h	/^#define LR_DIFF_RECOVERY_THREAD_H$/;"	d
LR_diff	./src/threads/LR_diff_extraction_thread.h	/^	BlockingQueue<std::complex<double>>* LR_diff;$/;"	m	struct:LR_diff_extract_args	typeref:typename:BlockingQueue<std::complex<double>> *
LR_diff_extract_args	./src/threads/LR_diff_extraction_thread.h	/^struct LR_diff_extract_args{$/;"	s
LR_diff_extraction_thread	./src/threads/LR_diff_extraction_thread.cpp	/^void* LR_diff_extraction_thread(void* args){$/;"	f	typeref:typename:void *
LR_diff_recovery_args	./src/threads/LR_diff_recovery_thread.h	/^struct LR_diff_recovery_args{$/;"	s
LR_diff_recovery_thread	./src/threads/LR_diff_recovery_thread.cpp	/^void* LR_diff_recovery_thread(void* args){$/;"	f	typeref:typename:void *
LRdiff	./src/threads/networking_thread.h	/^	BlockingQueue<double>* LRdiff;$/;"	m	struct:networking_args	typeref:typename:BlockingQueue<double> *
LRsum	./src/threads/networking_thread.h	/^	BlockingQueue<double>* LRsum;$/;"	m	struct:networking_args	typeref:typename:BlockingQueue<double> *
MONO_AUDIO_EXTRACTION_THREAD_H	./src/threads/mono_audio_extraction_thread.h	/^#define MONO_AUDIO_EXTRACTION_THREAD_H$/;"	d
N	./src/utils/utils.h	/^	int N;$/;"	m	struct:elementwise_multi_sum_args	typeref:typename:int
NETWORKING_THREAD_H	./src/threads/networking_thread.h	/^#define NETWORKING_THREAD_H$/;"	d
Node	./src/utils/Deque.h	/^template<class T> struct Node{$/;"	s
PILOT_EXTRACTION_THREAD_H	./src/threads/pilot_extraction_thread.h	/^#define PILOT_EXTRACTION_THREAD_H$/;"	d
PORT	./src/main.cpp	/^int PORT = 4500;$/;"	v	typeref:typename:int
QueueElement	./src/BQ2/BlockingQueue.h	/^struct QueueElement{$/;"	s
QueueElement	./src/utils/BlockingQueue.h	/^struct QueueElement{$/;"	s
THREADS_H_	./src/misc/threads.h	/^#define THREADS_H_$/;"	d
UTILS_H	./src/utils/utils.h	/^#define UTILS_H$/;"	d
access_mutex	./src/utils/BlockingQueue.h	/^    pthread_mutex_t access_mutex;$/;"	m	class:BlockingQueue	typeref:typename:pthread_mutex_t
arr1	./src/utils/utils.h	/^	std::complex<float>* arr1;$/;"	m	struct:elementwise_multi_sum_args	typeref:typename:std::complex<float> *
arr2	./src/utils/utils.h	/^	std::complex<float>* arr2;$/;"	m	struct:elementwise_multi_sum_args	typeref:typename:std::complex<float> *
capacity	./src/utils/BlockingQueue.h	/^    int capacity;$/;"	m	class:BlockingQueue	typeref:typename:int
capacity	./src/utils/Deque.h	/^	int capacity;$/;"	m	class:Deque	typeref:typename:int
capacity	./src/utils/FixedSizedDeque.h	/^	int capacity;$/;"	m	class:FixedSizedDeque	typeref:typename:int
capture_args	./src/threads/capture_thread.h	/^struct capture_args{$/;"	s
capture_thread	./src/threads/capture_thread.cpp	/^void* capture_thread(void* args){$/;"	f	typeref:typename:void *
center_freq	./src/threads/capture_thread.h	/^    double center_freq;$/;"	m	struct:capture_args	typeref:typename:double
chunK_size	./src/threads/FM_demod_thread.h	/^	int chunK_size;$/;"	m	struct:FM_demod_args	typeref:typename:int
chunk_size	./src/threads/LR_diff_extraction_thread.h	/^	int chunk_size;$/;"	m	struct:LR_diff_extract_args	typeref:typename:int
chunk_size	./src/threads/LR_diff_recovery_thread.h	/^	int chunk_size;$/;"	m	struct:LR_diff_recovery_args	typeref:typename:int
chunk_size	./src/threads/capture_thread.h	/^    int chunk_size = 1024;$/;"	m	struct:capture_args	typeref:typename:int
chunk_size	./src/threads/mono_audio_extraction_thread.h	/^    int chunk_size;$/;"	m	struct:m_audio_extract_args	typeref:typename:int
chunk_size	./src/threads/networking_thread.h	/^	int chunk_size;$/;"	m	struct:networking_args	typeref:typename:int
chunk_size	./src/threads/pilot_extraction_thread.h	/^	int chunk_size;$/;"	m	struct:pilot_extract_args_1	typeref:typename:int
chunk_size	./src/threads/pilot_extraction_thread.h	/^	int chunk_size;$/;"	m	struct:pilot_extract_args_2	typeref:typename:int
chunk_size	./src/threads/stage_1_filtering_thread.h	/^    int chunk_size;$/;"	m	struct:stage_1_filtering_args	typeref:typename:int
complex_f_p	./src/test.cpp	/^#define complex_f_p /;"	d	file:
consume_thread	./src/misc/threads.cpp	/^void* consume_thread(void* args){$/;"	f	typeref:typename:void *
convolution	./src/utils/utils.cpp	/^complex<float>* convolution(complex<float>* sig1, int sig1_size, complex<float>* kernel, int ker/;"	f	typeref:typename:complex<float> *
data	./src/BQ2/BlockingQueue.h	/^    std::complex<float>* data;$/;"	m	struct:QueueElement	typeref:typename:std::complex<float> *
data	./src/utils/BlockingQueue.h	/^    T* data;$/;"	m	struct:QueueElement	typeref:typename:T *
data	./src/utils/Deque.h	/^	T data;$/;"	m	struct:Node	typeref:typename:T
data	./src/utils/FixedSizedDeque.h	/^	std::deque<T> data;	$/;"	m	class:FixedSizedDeque	typeref:typename:std::deque<T>
dec_rate	./src/threads/LR_diff_extraction_thread.h	/^	int dec_rate;$/;"	m	struct:LR_diff_extract_args	typeref:typename:int
dec_rate	./src/threads/LR_diff_recovery_thread.h	/^	int dec_rate;$/;"	m	struct:LR_diff_recovery_args	typeref:typename:int
dec_rate	./src/threads/mono_audio_extraction_thread.h	/^    int dec_rate;$/;"	m	struct:m_audio_extract_args	typeref:typename:int
dec_rate	./src/threads/pilot_extraction_thread.h	/^	int dec_rate;$/;"	m	struct:pilot_extract_args_1	typeref:typename:int
dec_rate	./src/threads/pilot_extraction_thread.h	/^	int dec_rate;$/;"	m	struct:pilot_extract_args_2	typeref:typename:int
dec_rate	./src/threads/stage_1_filtering_thread.h	/^    int dec_rate;$/;"	m	struct:stage_1_filtering_args	typeref:typename:int
elementwise_multi_sum	./src/utils/utils.cpp	/^void* elementwise_multi_sum(void* args){$/;"	f	typeref:typename:void *
elementwise_multi_sum_args	./src/utils/utils.h	/^struct elementwise_multi_sum_args{$/;"	s
endIndex	./src/utils/utils.h	/^	int endIndex;$/;"	m	struct:elementwise_multi_sum_args	typeref:typename:int
exit_loop	./src/threads/FM_demod_thread.h	/^	std::atomic<bool>* exit_loop;$/;"	m	struct:FM_demod_args	typeref:typename:std::atomic<bool> *
exit_loop	./src/threads/LR_diff_extraction_thread.h	/^	std::atomic<bool>* exit_loop;$/;"	m	struct:LR_diff_extract_args	typeref:typename:std::atomic<bool> *
exit_loop	./src/threads/LR_diff_recovery_thread.h	/^	std::atomic<bool>* exit_loop;$/;"	m	struct:LR_diff_recovery_args	typeref:typename:std::atomic<bool> *
exit_loop	./src/threads/capture_thread.h	/^    std::atomic<bool>* exit_loop;$/;"	m	struct:capture_args	typeref:typename:std::atomic<bool> *
exit_loop	./src/threads/mono_audio_extraction_thread.h	/^    std::atomic<bool>* exit_loop;$/;"	m	struct:m_audio_extract_args	typeref:typename:std::atomic<bool> *
exit_loop	./src/threads/networking_thread.h	/^	std::atomic<bool>* exit_loop;$/;"	m	struct:networking_args	typeref:typename:std::atomic<bool> *
exit_loop	./src/threads/pilot_extraction_thread.h	/^	std::atomic<bool>* exit_loop;$/;"	m	struct:pilot_extract_args_1	typeref:typename:std::atomic<bool> *
exit_loop	./src/threads/pilot_extraction_thread.h	/^	std::atomic<bool>* exit_loop;$/;"	m	struct:pilot_extract_args_2	typeref:typename:std::atomic<bool> *
exit_loop	./src/threads/stage_1_filtering_thread.h	/^    std::atomic<bool>* exit_loop;$/;"	m	struct:stage_1_filtering_args	typeref:typename:std::atomic<bool> *
filter_path_diffeq_a	./src/threads/LR_diff_extraction_thread.h	/^	std::string filter_path_diffeq_a;$/;"	m	struct:LR_diff_extract_args	typeref:typename:std::string
filter_path_diffeq_a	./src/threads/LR_diff_recovery_thread.h	/^	std::string filter_path_diffeq_a;$/;"	m	struct:LR_diff_recovery_args	typeref:typename:std::string
filter_path_diffeq_a	./src/threads/mono_audio_extraction_thread.h	/^    std::string filter_path_diffeq_a;$/;"	m	struct:m_audio_extract_args	typeref:typename:std::string
filter_path_diffeq_a	./src/threads/pilot_extraction_thread.h	/^	std::string filter_path_diffeq_a;$/;"	m	struct:pilot_extract_args_1	typeref:typename:std::string
filter_path_diffeq_a	./src/threads/pilot_extraction_thread.h	/^	std::string filter_path_diffeq_a;$/;"	m	struct:pilot_extract_args_2	typeref:typename:std::string
filter_path_diffeq_a	./src/threads/stage_1_filtering_thread.h	/^    std::string filter_path_diffeq_a;$/;"	m	struct:stage_1_filtering_args	typeref:typename:std::string
filter_path_diffeq_b	./src/threads/LR_diff_extraction_thread.h	/^	std::string filter_path_diffeq_b;$/;"	m	struct:LR_diff_extract_args	typeref:typename:std::string
filter_path_diffeq_b	./src/threads/LR_diff_recovery_thread.h	/^	std::string filter_path_diffeq_b;$/;"	m	struct:LR_diff_recovery_args	typeref:typename:std::string
filter_path_diffeq_b	./src/threads/mono_audio_extraction_thread.h	/^    std::string filter_path_diffeq_b;$/;"	m	struct:m_audio_extract_args	typeref:typename:std::string
filter_path_diffeq_b	./src/threads/pilot_extraction_thread.h	/^	std::string filter_path_diffeq_b;$/;"	m	struct:pilot_extract_args_1	typeref:typename:std::string
filter_path_diffeq_b	./src/threads/pilot_extraction_thread.h	/^	std::string filter_path_diffeq_b;$/;"	m	struct:pilot_extract_args_2	typeref:typename:std::string
filter_path_diffeq_b	./src/threads/stage_1_filtering_thread.h	/^    std::string filter_path_diffeq_b;$/;"	m	struct:stage_1_filtering_args	typeref:typename:std::string
filter_path_fft	./src/threads/mono_audio_extraction_thread.h	/^    std::string filter_path_fft;$/;"	m	struct:m_audio_extract_args	typeref:typename:std::string
filter_path_fft	./src/threads/stage_1_filtering_thread.h	/^    std::string filter_path_fft;$/;"	m	struct:stage_1_filtering_args	typeref:typename:std::string
filter_path_h	./src/threads/LR_diff_extraction_thread.h	/^	std::string filter_path_h;$/;"	m	struct:LR_diff_extract_args	typeref:typename:std::string
filter_path_h	./src/threads/pilot_extraction_thread.h	/^	std::string filter_path_h;$/;"	m	struct:pilot_extract_args_1	typeref:typename:std::string
filter_path_h	./src/threads/pilot_extraction_thread.h	/^	std::string filter_path_h;$/;"	m	struct:pilot_extract_args_2	typeref:typename:std::string
filter_path_h	./src/threads/stage_1_filtering_thread.h	/^    std::string filter_path_h;$/;"	m	struct:stage_1_filtering_args	typeref:typename:std::string
float2int16	./src/utils/utils.cpp	/^int16_t float2int16(float f){$/;"	f	typeref:typename:int16_t
gain	./src/threads/LR_diff_recovery_thread.h	/^	double gain;$/;"	m	struct:LR_diff_recovery_args	typeref:typename:double
get	./src/utils/FixedSizedDeque.h	/^template <class T> T FixedSizedDeque<T>::get(int index){$/;"	f	class:FixedSizedDeque	typeref:typename:T
getsize	./src/BQ2/BlockingQueue.cpp	/^int BlockingQueue::getsize(){$/;"	f	class:BlockingQueue	typeref:typename:int
getsize	./src/utils/BlockingQueue.h	/^int BlockingQueue<T>::getsize(){$/;"	f	class:BlockingQueue	typeref:typename:int
head	./src/BQ2/BlockingQueue.h	/^    QueueElement* head;$/;"	m	class:BlockingQueue	typeref:typename:QueueElement *
head	./src/utils/BlockingQueue.h	/^    QueueElement<T>* head;$/;"	m	class:BlockingQueue	typeref:typename:QueueElement<T> *
head	./src/utils/Deque.h	/^	Node<T>* head;$/;"	m	class:Deque	typeref:typename:Node<T> *
head_lock	./src/BQ2/BlockingQueue.h	/^    pthread_mutex_t head_lock;$/;"	m	class:BlockingQueue	typeref:typename:pthread_mutex_t
in	./src/threads/FM_demod_thread.h	/^	BlockingQueue<std::complex<float>>* in;$/;"	m	struct:FM_demod_args	typeref:typename:BlockingQueue<std::complex<float>> *
in	./src/threads/LR_diff_recovery_thread.h	/^	BlockingQueue<double>* in;$/;"	m	struct:LR_diff_recovery_args	typeref:typename:BlockingQueue<double> *
in	./src/threads/mono_audio_extraction_thread.h	/^    BlockingQueue<double>* in; $/;"	m	struct:m_audio_extract_args	typeref:typename:BlockingQueue<double> *
in	./src/threads/pilot_extraction_thread.h	/^	BlockingQueue<double>* in;$/;"	m	struct:pilot_extract_args_1	typeref:typename:BlockingQueue<double> *
in	./src/threads/pilot_extraction_thread.h	/^	BlockingQueue<std::complex<double>>* in;$/;"	m	struct:pilot_extract_args_2	typeref:typename:BlockingQueue<std::complex<double>> *
in	./src/threads/stage_1_filtering_thread.h	/^    BlockingQueue<std::complex<float>>* in; $/;"	m	struct:stage_1_filtering_args	typeref:typename:BlockingQueue<std::complex<float>> *
m_audio_extract_args	./src/threads/mono_audio_extraction_thread.h	/^struct m_audio_extract_args{$/;"	s
main	./src/main.cpp	/^int main(int argc, char** argv){$/;"	f	typeref:typename:int
main	./src/misc/test.cpp	/^int main(){$/;"	f	typeref:typename:int
main	./src/test.cpp	/^int main(){$/;"	f	typeref:typename:int
maxIndex	./src/utils/utils.h	/^	int maxIndex;$/;"	m	struct:elementwise_multi_sum_args	typeref:typename:int
mono_audio_extraction_thread_diffeq	./src/threads/mono_audio_extraction_thread.cpp	/^void* mono_audio_extraction_thread_diffeq(void* args){$/;"	f	typeref:typename:void *
networking_args	./src/threads/networking_thread.h	/^struct networking_args{$/;"	s
networking_thread	./src/threads/networking_thread.cpp	/^void* networking_thread(void* args){$/;"	f	typeref:typename:void *
next	./src/BQ2/BlockingQueue.h	/^    QueueElement* next;$/;"	m	struct:QueueElement	typeref:typename:QueueElement *
next	./src/utils/BlockingQueue.h	/^    QueueElement* next;$/;"	m	struct:QueueElement	typeref:typename:QueueElement *
next	./src/utils/Deque.h	/^	Node<T>* next;$/;"	m	struct:Node	typeref:typename:Node<T> *
non_empty_cond	./src/BQ2/BlockingQueue.h	/^    pthread_cond_t non_empty_cond;   \/\/ use this when the queue is empty$/;"	m	class:BlockingQueue	typeref:typename:pthread_cond_t
non_empty_cond	./src/utils/BlockingQueue.h	/^    pthread_cond_t non_empty_cond;   \/\/ use this when the queue is empty$/;"	m	class:BlockingQueue	typeref:typename:pthread_cond_t
ntaps	./src/threads/stage_1_filtering_thread.h	/^    int ntaps;$/;"	m	struct:stage_1_filtering_args	typeref:typename:int
operator []	./src/utils/FixedSizedDeque.h	/^template <class T> T FixedSizedDeque<T>::operator[](int index){$/;"	f	class:FixedSizedDeque	typeref:typename:T
out	./src/threads/LR_diff_extraction_thread.h	/^	BlockingQueue<double>* out;	$/;"	m	struct:LR_diff_extract_args	typeref:typename:BlockingQueue<double> *
out	./src/threads/LR_diff_recovery_thread.h	/^	BlockingQueue<std::complex<double>>* out;	$/;"	m	struct:LR_diff_recovery_args	typeref:typename:BlockingQueue<std::complex<double>> *
out	./src/threads/capture_thread.h	/^    BlockingQueue<std::complex<float>>* out; $/;"	m	struct:capture_args	typeref:typename:BlockingQueue<std::complex<float>> *
out	./src/threads/mono_audio_extraction_thread.h	/^    BlockingQueue<double>* out; $/;"	m	struct:m_audio_extract_args	typeref:typename:BlockingQueue<double> *
out	./src/threads/pilot_extraction_thread.h	/^	BlockingQueue<std::complex<double>>* out;$/;"	m	struct:pilot_extract_args_1	typeref:typename:BlockingQueue<std::complex<double>> *
out	./src/threads/pilot_extraction_thread.h	/^	BlockingQueue<std::complex<double>>* out;$/;"	m	struct:pilot_extract_args_2	typeref:typename:BlockingQueue<std::complex<double>> *
out	./src/threads/stage_1_filtering_thread.h	/^    BlockingQueue<std::complex<float>>* out; $/;"	m	struct:stage_1_filtering_args	typeref:typename:BlockingQueue<std::complex<float>> *
out1	./src/threads/FM_demod_thread.h	/^	BlockingQueue<double>* out1;$/;"	m	struct:FM_demod_args	typeref:typename:BlockingQueue<double> *
out2	./src/threads/FM_demod_thread.h	/^	BlockingQueue<double>* out2;$/;"	m	struct:FM_demod_args	typeref:typename:BlockingQueue<double> *
out3	./src/threads/FM_demod_thread.h	/^	BlockingQueue<double>* out3;$/;"	m	struct:FM_demod_args	typeref:typename:BlockingQueue<double> *
pilot	./src/threads/LR_diff_extraction_thread.h	/^	BlockingQueue<std::complex<double>>* pilot;$/;"	m	struct:LR_diff_extract_args	typeref:typename:BlockingQueue<std::complex<double>> *
pilot_extract_args_1	./src/threads/pilot_extraction_thread.h	/^struct pilot_extract_args_1{$/;"	s
pilot_extract_args_2	./src/threads/pilot_extraction_thread.h	/^struct pilot_extract_args_2{$/;"	s
pilot_extraction_thread_h	./src/threads/pilot_extraction_thread.cpp	/^void* pilot_extraction_thread_h(void* args){$/;"	f	typeref:typename:void *
pilot_extraction_thread_stage_1_diffeq	./src/threads/pilot_extraction_thread.cpp	/^void* pilot_extraction_thread_stage_1_diffeq(void* args){$/;"	f	typeref:typename:void *
pilot_extraction_thread_stage_2_diffeq	./src/threads/pilot_extraction_thread.cpp	/^void* pilot_extraction_thread_stage_2_diffeq(void* args){$/;"	f	typeref:typename:void *
pop	./src/BQ2/BlockingQueue.cpp	/^QueueElement* BlockingQueue::pop(){$/;"	f	class:BlockingQueue	typeref:typename:QueueElement *
pop	./src/utils/BlockingQueue.h	/^QueueElement<T>* BlockingQueue<T>::pop(int timeInMs, std::string name){$/;"	f	class:BlockingQueue	typeref:typename:QueueElement<T> *
pop	./src/utils/BlockingQueue.h	/^QueueElement<T>* BlockingQueue<T>::pop(std::string owner){$/;"	f	class:BlockingQueue	typeref:typename:QueueElement<T> *
pop_back	./src/utils/FixedSizedDeque.h	/^template <class T> void FixedSizedDeque<T>::pop_back(){$/;"	f	class:FixedSizedDeque	typeref:typename:void
pop_front	./src/utils/FixedSizedDeque.h	/^template <class T> void FixedSizedDeque<T>::pop_front(){$/;"	f	class:FixedSizedDeque	typeref:typename:void
pop_left	./src/utils/Deque.h	/^void Deque<T>::pop_left(){$/;"	f	class:Deque	typeref:typename:void
pop_right	./src/utils/Deque.h	/^void Deque<T>::pop_right(){$/;"	f	class:Deque	typeref:typename:void
prev	./src/utils/Deque.h	/^	Node<T>* prev;$/;"	m	struct:Node	typeref:typename:Node<T> *
push	./src/BQ2/BlockingQueue.cpp	/^void BlockingQueue::push(complex<float>* buffer){$/;"	f	class:BlockingQueue	typeref:typename:void
push	./src/utils/BlockingQueue.h	/^void BlockingQueue<T>::push(T* buffer){$/;"	f	class:BlockingQueue	typeref:typename:void
push_back	./src/utils/Deque.h	/^void Deque<T>::push_back(T n){$/;"	f	class:Deque	typeref:typename:void
push_back	./src/utils/FixedSizedDeque.h	/^template <class T> void FixedSizedDeque<T>::push_back(T e){$/;"	f	class:FixedSizedDeque	typeref:typename:void
push_front	./src/utils/Deque.h	/^void Deque<T>::push_front(T n){$/;"	f	class:Deque	typeref:typename:void
push_front	./src/utils/FixedSizedDeque.h	/^template <class T> void FixedSizedDeque<T>::push_front(T e){$/;"	f	class:FixedSizedDeque	typeref:typename:void
push_left	./src/utils/Deque.h	/^void Deque<T>::push_left(T n){$/;"	f	class:Deque	typeref:typename:void
push_right	./src/utils/Deque.h	/^void Deque<T>::push_right(T n){$/;"	f	class:Deque	typeref:typename:void
read_complex_double_coeffs	./src/utils/utils.cpp	/^vector<complex<double>>* read_complex_double_coeffs(string filepath){$/;"	f	typeref:typename:vector<complex<double>> *
read_complex_float_coeffs	./src/utils/utils.cpp	/^vector<complex<float>>* read_complex_float_coeffs(string filepath){$/;"	f	typeref:typename:vector<complex<float>> *
read_double_coeffs	./src/utils/utils.cpp	/^vector<double>* read_double_coeffs(string filepath){$/;"	f	typeref:typename:vector<double> *
read_float_coeffs	./src/utils/utils.cpp	/^vector<float>* read_float_coeffs(string filepath){$/;"	f	typeref:typename:vector<float> *
res	./src/utils/utils.h	/^	std::complex<float>* res;$/;"	m	struct:elementwise_multi_sum_args	typeref:typename:std::complex<float> *
sample_rate	./src/threads/FM_demod_thread.h	/^	double sample_rate;$/;"	m	struct:FM_demod_args	typeref:typename:double
sample_rate	./src/threads/LR_diff_extraction_thread.h	/^	int sample_rate;$/;"	m	struct:LR_diff_extract_args	typeref:typename:int
sample_rate	./src/threads/LR_diff_recovery_thread.h	/^	int sample_rate;$/;"	m	struct:LR_diff_recovery_args	typeref:typename:int
sample_rate	./src/threads/capture_thread.h	/^    double sample_rate;$/;"	m	struct:capture_args	typeref:typename:double
sample_rate	./src/threads/mono_audio_extraction_thread.h	/^    double sample_rate;$/;"	m	struct:m_audio_extract_args	typeref:typename:double
sample_rate	./src/threads/pilot_extraction_thread.h	/^	double sample_rate;$/;"	m	struct:pilot_extract_args_1	typeref:typename:double
sample_rate	./src/threads/pilot_extraction_thread.h	/^	double sample_rate;$/;"	m	struct:pilot_extract_args_2	typeref:typename:double
sample_rate	./src/threads/stage_1_filtering_thread.h	/^    double sample_rate;$/;"	m	struct:stage_1_filtering_args	typeref:typename:double
setup_socket	./src/utils/utils.cpp	/^int setup_socket(int port){$/;"	f	typeref:typename:int
signal_bw	./src/threads/mono_audio_extraction_thread.h	/^    int signal_bw;$/;"	m	struct:m_audio_extract_args	typeref:typename:int
signal_bw	./src/threads/stage_1_filtering_thread.h	/^    int signal_bw;$/;"	m	struct:stage_1_filtering_args	typeref:typename:int
size	./src/BQ2/BlockingQueue.h	/^    int size;$/;"	m	class:BlockingQueue	typeref:typename:int
size	./src/utils/BlockingQueue.h	/^    int size;$/;"	m	class:BlockingQueue	typeref:typename:int
socket_fd	./src/threads/networking_thread.h	/^	int socket_fd;	$/;"	m	struct:networking_args	typeref:typename:int
split	./src/utils/utils.cpp	/^std::vector<std::string> split(std::string str, char delim){$/;"	f	typeref:typename:std::vector<std::string>
stage_1_filtering_args	./src/threads/stage_1_filtering_thread.h	/^struct stage_1_filtering_args{$/;"	s
stage_1_filtering_thread_diffeq_dq	./src/threads/stage_1_filtering_thread.cpp	/^void* stage_1_filtering_thread_diffeq_dq(void* args){$/;"	f	typeref:typename:void *
stage_1_filtering_thread_diffeq_ll	./src/threads/stage_1_filtering_thread.cpp	/^void* stage_1_filtering_thread_diffeq_ll(void* args){$/;"	f	typeref:typename:void *
stage_1_filtering_thread_fft	./src/threads/stage_1_filtering_thread.cpp	/^void* stage_1_filtering_thread_fft(void* args){$/;"	f	typeref:typename:void *
stage_1_filtering_thread_h	./src/threads/stage_1_filtering_thread.cpp	/^void* stage_1_filtering_thread_h(void* args){$/;"	f	typeref:typename:void *
startIndex	./src/utils/utils.h	/^	int startIndex;$/;"	m	struct:elementwise_multi_sum_args	typeref:typename:int
supply_thread	./src/misc/threads.cpp	/^void* supply_thread(void* args){$/;"	f	typeref:typename:void *
tail	./src/BQ2/BlockingQueue.h	/^    QueueElement* tail;$/;"	m	class:BlockingQueue	typeref:typename:QueueElement *
tail	./src/utils/BlockingQueue.h	/^    QueueElement<T>* tail;$/;"	m	class:BlockingQueue	typeref:typename:QueueElement<T> *
tail	./src/utils/Deque.h	/^	Node<T>* tail;$/;"	m	class:Deque	typeref:typename:Node<T> *
tail_lock	./src/BQ2/BlockingQueue.h	/^    pthread_mutex_t tail_lock;$/;"	m	class:BlockingQueue	typeref:typename:pthread_mutex_t
taps	./src/threads/LR_diff_extraction_thread.h	/^	int taps;$/;"	m	struct:LR_diff_extract_args	typeref:typename:int
taps	./src/threads/pilot_extraction_thread.h	/^	int taps;$/;"	m	struct:pilot_extract_args_1	typeref:typename:int
taps	./src/threads/pilot_extraction_thread.h	/^	int taps;$/;"	m	struct:pilot_extract_args_2	typeref:typename:int
tcp	./src/main.cpp	/^bool tcp = true;$/;"	v	typeref:typename:bool
~BlockingQueue	./src/BQ2/BlockingQueue.cpp	/^BlockingQueue::~BlockingQueue(){$/;"	f	class:BlockingQueue
~BlockingQueue	./src/utils/BlockingQueue.h	/^BlockingQueue<T>::~BlockingQueue(){$/;"	f	class:BlockingQueue
~QueueElement	./src/utils/BlockingQueue.h	/^    ~QueueElement(){$/;"	f	struct:QueueElement
